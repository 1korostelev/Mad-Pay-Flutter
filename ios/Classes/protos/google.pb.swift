// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Google_CardAuthMethods: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case panOnly // = 0
  case cryptogram3Ds // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .panOnly
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .panOnly
    case 1: self = .cryptogram3Ds
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .panOnly: return 0
    case .cryptogram3Ds: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_CardAuthMethods: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Google_CardAuthMethods] = [
    .panOnly,
    .cryptogram3Ds,
  ]
}

#endif  // swift(>=4.2)

struct Google_GoogleParameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gatewayName: String = String()

  var gatewayMerchantID: String = String()

  var merchantName: String = String()

  var allowedCardsMethods: [Google_CardAuthMethods] = []

  var emailRequired: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google"

extension Google_CardAuthMethods: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PAN_ONLY"),
    1: .same(proto: "CRYPTOGRAM_3DS"),
  ]
}

extension Google_GoogleParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GoogleParameters"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gateway_name"),
    2: .standard(proto: "gateway_merchant_id"),
    3: .standard(proto: "merchant_name"),
    4: .standard(proto: "allowed_cards_methods"),
    5: .standard(proto: "email_required"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gatewayName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.gatewayMerchantID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.merchantName) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.allowedCardsMethods) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.emailRequired) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gatewayName.isEmpty {
      try visitor.visitSingularStringField(value: self.gatewayName, fieldNumber: 1)
    }
    if !self.gatewayMerchantID.isEmpty {
      try visitor.visitSingularStringField(value: self.gatewayMerchantID, fieldNumber: 2)
    }
    if !self.merchantName.isEmpty {
      try visitor.visitSingularStringField(value: self.merchantName, fieldNumber: 3)
    }
    if !self.allowedCardsMethods.isEmpty {
      try visitor.visitPackedEnumField(value: self.allowedCardsMethods, fieldNumber: 4)
    }
    if self.emailRequired != false {
      try visitor.visitSingularBoolField(value: self.emailRequired, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_GoogleParameters, rhs: Google_GoogleParameters) -> Bool {
    if lhs.gatewayName != rhs.gatewayName {return false}
    if lhs.gatewayMerchantID != rhs.gatewayMerchantID {return false}
    if lhs.merchantName != rhs.merchantName {return false}
    if lhs.allowedCardsMethods != rhs.allowedCardsMethods {return false}
    if lhs.emailRequired != rhs.emailRequired {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
